x	0.2648181866991114
data	0.13904534862483173
does	0.12804395840396593
idiom	0.12804395840396593
places	0.12804395840396593
where	0.11658860715734258
here	0.11274502670160602
0;	0.1112362788998654
c	0.09794556018946203
//	0.09794556018946203
i	0.08570236516577927
sum	0.08342720917489904
&lt;	0.08342720917489904
int	0.07345917014209652
code	0.06952267431241586
loop	0.06952267431241586
&lt;&lt;	0.06952267431241586
while	0.06620454667477785
well.	0.06620454667477785
code:#include	0.06620454667477785
since	0.06620454667477785
}}output:9	0.06620454667477785
features	0.06620454667477785
from?	0.06620454667477785
compiled	0.06620454667477785
completely	0.06620454667477785
&quot;%d	0.06620454667477785
4.4.here's	0.06620454667477785
snippet	0.06620454667477785
goes	0.06620454667477785
surprised	0.06620454667477785
dark	0.06620454667477785
both	0.06620454667477785
reading	0.06620454667477785
2008	0.06620454667477785
0i'd	0.06620454667477785
has	0.06620454667477785
gcc	0.06620454667477785
g++	0.06620454667477785
10;	0.06620454667477785
&lt;stdio.h&gt;int	0.06620454667477785
defined	0.06620454667477785
corners	0.06620454667477785
c++/stl	0.06620454667477785
comp.lang.c++.moderated	0.06620454667477785
worked	0.06620454667477785
visual	0.06620454667477785
studio	0.06620454667477785
following	0.06620454667477785
printf	0.06620454667477785
hidden	0.06620454667477785
assume	0.06620454667477785
standard	0.06620454667477785
--&gt;	0.06620454667477785
works	0.06620454667477785
function	0.06402197920198296
possible?what	0.06402197920198296
objects?	0.06402197920198296
copy-swapcopy	0.06402197920198296
copy	0.06402197920198296
operator	0.06402197920198296
c++:	0.06402197920198296
been	0.06402197920198296
dynamically	0.06402197920198296
style	0.06402197920198296
partial	0.06402197920198296
idioms:	0.06402197920198296
is.	0.06402197920198296
overload	0.06402197920198296
copy-and-swap	0.06402197920198296
didn't	0.06402197920198296
problems	0.06402197920198296
are	0.06402197920198296
common	0.06402197920198296
coding	0.06402197920198296
constructor	0.06402197920198296
question	0.06402197920198296
used?	0.06402197920198296
elision	0.06402197920198296
change	0.06402197920198296
used?although	0.06402197920198296
optimizes	0.06402197920198296
mentioned	0.06402197920198296
answer	0.06402197920198296
mentioned:what	0.06402197920198296
solve?	0.06402197920198296
idiomc++:	0.06402197920198296
previously	0.06402197920198296
c++11	0.06402197920198296
favorite	0.06402197920198296
allocating	0.06402197920198296
singular	0.06402197920198296
many	0.06402197920198296
list	0.06402197920198296
array	0.061215975118413764
c	0.05829430357867129
//	0.05829430357867129
&quot;	0.05829430357867129
main	0.05829430357867129
i	0.05829430357867129
int	0.05829430357867129
should	0.05637251335080301
it's	0.05637251335080301
where	0.05637251335080301
c++	0.05637251335080301
array	0.05637251335080301
unsigned	0.0556181394499327
processing	0.0556181394499327
data[c]	0.0556181394499327
runs	0.0556181394499327
long	0.0556181394499327
++c	0.0556181394499327
arraysize;	0.0556181394499327
arraysize	0.0556181394499327
was	0.05372031612173115
was	0.0519493166891466
thought	0.04171360458744952
sorting	0.04171360458744952
sorted	0.04171360458744952
+	0.04171360458744952
start	0.04171360458744952
was	0.03384764548004063
data[c];	0.02780906972496635
faster	0.02780906972496635
primary	0.02780906972496635
makes	0.02780906972496635
256;	0.02780906972496635
generate	0.02780906972496635
system.nanotime	0.02780906972496635
clock	0.02780906972496635
random	0.02780906972496635
system.out.println	0.02780906972496635
elapsedtime	0.02780906972496635
std::cout	0.02780906972496635
next	0.02780906972496635
&quot;sum	0.02780906972496635
100000;	0.02780906972496635
unsorted	0.02780906972496635
same	0.02780906972496635
128	0.02780906972496635
test	0.02780906972496635
std::sort	0.02780906972496635
&gt;=	0.02780906972496635
++i	0.02780906972496635
+=	0.02780906972496635
!!!	0.02780906972496635
32768;	0.02780906972496635
&quot;	0.024486390047365508
main	0.024486390047365508
static_cast&lt;double&gt;	0.013904534862483175
&lt;algorithm&gt;#include	0.013904534862483175
java.util.random;public	0.013904534862483175
java.util.arrays;import	0.013904534862483175
&lt;ctime&gt;#include	0.013904534862483175
&lt;iostream&gt;int	0.013904534862483175
data[arraysize];	0.013904534862483175
int[arraysize];	0.013904534862483175
faster.#include	0.013904534862483175
clocks_per_sec;	0.013904534862483175
matter.related	0.013904534862483175
generated.what	0.013904534862483175
'\n';}without	0.013904534862483175
seconds.with	0.013904534862483175
optimization	0.013904534862483175
miraculously	0.013904534862483175
1000000000.0	0.013904534862483175
rnd.nextint	0.013904534862483175
options:why	0.013904534862483175
java:import	0.013904534862483175
independent	0.013904534862483175
arrays.sort	0.013904534862483175
std::rand	0.013904534862483175
result.my	0.013904534862483175
initially	0.013904534862483175
different	0.013904534862483175
compilers	0.013904534862483175
clang?gcc	0.013904534862483175
calculate	0.013904534862483175
behavior.	0.013904534862483175
array?the	0.013904534862483175
string[]	0.013904534862483175
seconds.	0.013904534862483175
q&amp;as	0.013904534862483175
peculiar	0.013904534862483175
language	0.013904534862483175
followup	0.013904534862483175
compiler	0.013904534862483175
actually	0.013904534862483175
unknown	0.013904534862483175
summing	0.013904534862483175
strange	0.013904534862483175
similar	0.013904534862483175
faster.	0.013904534862483175
extreme	0.013904534862483175
clock_t	0.013904534862483175
anomaly	0.013904534862483175
}}with	0.013904534862483175
x86-64	0.013904534862483175
static	0.013904534862483175
slower	0.013904534862483175
region	0.013904534862483175
reason	0.013904534862483175
public	0.013904534862483175
on?why	0.013904534862483175
needed	0.013904534862483175
modern	0.013904534862483175
effect	0.013904534862483175
double	0.013904534862483175
data[]	0.013904534862483175
brings	0.013904534862483175
before	0.013904534862483175
array.	0.013904534862483175
almost	0.013904534862483175
-start	0.013904534862483175
worth	0.013904534862483175
tried	0.013904534862483175
times	0.013904534862483175
timed	0.013904534862483175
terms	0.013904534862483175
takes	0.013904534862483175
speed	0.013904534862483175
silly	0.013904534862483175
shows	0.013904534862483175
piece	0.013904534862483175
order	0.013904534862483175
might	0.013904534862483175
main{	0.013904534862483175
later	0.013904534862483175
going	0.013904534862483175
doing	0.013904534862483175
const	0.013904534862483175
class	0.013904534862483175
cache	0.013904534862483175
11.54	0.013904534862483175
'\n';	0.013904534862483175
void	0.013904534862483175
very	0.013904534862483175
pass	0.013904534862483175
more	0.013904534862483175
less	0.013904534862483175
flag	0.013904534862483175
args	0.013904534862483175
1.93	0.013904534862483175
six	0.013904534862483175
rnd	0.013904534862483175
-o3	0.013904534862483175
-o2	0.013904534862483175
itself	0.013904534862483175
here	0.012243195023682754
it's	0.012243195023682754
should	0.012243195023682754
c++	0.012243195023682754
